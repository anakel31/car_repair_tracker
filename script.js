// --- –ó–ê–ì–ê–õ–¨–ù–Ü –§–£–ù–ö–¶–Ü–á --- //
// –ò–º—è —Ñ–∞–π–ª–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö (–æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –ø–∞–ø–∫–∏ —Å–∞–π—Ç–∞)
const DATA_FILE = "data.json";

// --- –†–∞–±–æ—Ç–∞ —Å –ª–æ–∫–∞–ª—å–Ω—ã–º —Ñ–∞–π–ª–æ–º (—Ç–æ–ª—å–∫–æ –¥–ª—è –¥–µ—Å–∫—Ç–æ–ø–∞ —á–µ—Ä–µ–∑ Node.js/Electron) --- //

async function universalReadJsonFile(apiUrl, fileUrl) {
  // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º —á–µ—Ä–µ–∑ API
  try {
    const res = await fetch(apiUrl);
    if (res.ok) return await res.json();
  } catch {}
  // –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å ‚Äî –ø—Ä–æ–±—É–µ–º –∫–∞–∫ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π —Ñ–∞–π–ª
  try {
    const res = await fetch(fileUrl);
    if (res.ok) return await res.json();
  } catch {}
  return [];
}
async function readDataFile() {
  return await universalReadJsonFile('/api/data', 'data.json');
}

async function readCarsFile() {
  return await universalReadJsonFile('/api/cars', 'cars.json');
}

async function readHistoryFile() {
  return await universalReadJsonFile('/api/history', 'history.json');
}

async function writeDataFile(data) {
  try {
    const res = await fetch('/api/data', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(data)
    });
    return res.ok;
  } catch {
    alert("–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –¥–∞–Ω–Ω—ã—Ö!");
    return false;
  }
}

// --- –†–∞–±–æ—Ç–∞ —Å –¥–∞–Ω–Ω—ã–º–∏ --- //

async function getCarLinks() {
  const data = await readDataFile();
  return data.filter(item => item.tracker_type && item.tracker_id);
}

async function setCarLinks(links) {
  const data = await readDataFile();
  // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –ø—Ä–∏–≤—è–∑–∫–∏, –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ
  const others = data.filter(item => !(item.tracker_type && item.tracker_id));
  await writeDataFile([...others, ...links]);
}

async function getRepairHistory() {
  const data = await readDataFile();
  return data.filter(item => item.part && item.date);
}

async function setRepairHistory(history) {
  const data = await readDataFile();
  // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é –∏—Å—Ç–æ—Ä–∏—é, –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é
  const others = data.filter(item => !(item.part && item.date));
  await writeDataFile([...others, ...history]);
}

// --- –§–£–ù–ö–¶–Ü–á –î–õ–Ø index.html --- //

async function populateCarSelect() {
  const select = document.getElementById("car-select");
  if (!select) return;

  try {
    const links = await getCarLinks();
    select.innerHTML = '<option value="">-- –û–±–µ—Ä—ñ—Ç—å –∞–≤—Ç–æ --</option>';
    links.forEach(link => {
      const option = document.createElement("option");
      option.value = link.car;
      option.textContent = link.car;
      select.appendChild(option);
    });
  } catch (err) {
    console.error("–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —Å–ø–∏—Å–æ–∫ –∞–≤—Ç–æ:", err);
  }
}

async function renderRepairHistory() {
  const container = document.getElementById("repair-history");
  if (!container) return;

  const history = await getRepairHistory();

  if (history.length === 0) {
    container.innerHTML = "<p>–Ü—Å—Ç–æ—Ä—ñ—è —Ä–µ–º–æ–Ω—Ç—É –ø–æ—Ä–æ–∂–Ω—è.</p>";
    return;
  }

  container.innerHTML = history.slice().reverse().map(item => {
    return `
      <div style="border:1px solid #ccc; padding:10px; margin-bottom:10px;">
        <strong>–ê–≤—Ç–æ:</strong> ${item.car}<br>
        <strong>–ó–∞–ø—á–∞—Å—Ç–∏–Ω–∞:</strong> ${item.part}<br>
        <strong>–ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è:</strong> ${item.reminder ? "–¢–∞–∫" : "–ù—ñ"}<br>
        <strong>–ö–æ–º–µ–Ω—Ç–∞—Ä:</strong> ${item.comment || "<i>–Ω–µ–º–∞—î</i>"}<br>
        <strong>–î–∞—Ç–∞:</strong> ${item.date}
      </div>
    `;
  }).join("");
}

async function setupIndexPage() {
  await populateCarSelect();
  await renderRepairHistory();

  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–µ–≥–æ–¥–Ω—è—à–Ω—é—é –¥–∞—Ç—É –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
  const dateInput = document.getElementById("replace-date");
  if (dateInput) {
    const today = new Date();
    const yyyy = today.getFullYear();
    const mm = String(today.getMonth() + 1).padStart(2, '0');
    const dd = String(today.getDate()).padStart(2, '0');
    dateInput.value = `${yyyy}-${mm}-${dd}`;
  }

  // –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç–ª–µ–º–µ–Ω—Ç—ã –µ—Å—Ç—å –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
  const partSelect = document.getElementById("part-select");
  const reminderCheckbox = document.getElementById("reminder");
  const reminderSettings = document.getElementById("reminder-settings");
  const unitLabel = document.getElementById("unit-label");

  function updateReminderVisibility() {
    if (!partSelect || !reminderCheckbox || !reminderSettings || !unitLabel) return;
    const selectedPart = partSelect.value;
    const isChecked = reminderCheckbox.checked;

    if (isChecked) {
      reminderSettings.style.display = "block";
      unitLabel.textContent = selectedPart === "–°—Ç—Ä–∞—Ö–æ–≤–∫–∞" || selectedPart === "–¢–µ—Ö–Ω—ñ—á–Ω–∏–π –æ–≥–ª—è–¥"
        ? "–¥–Ω—ñ–≤"
        : "–∫—ñ–ª–æ–º–µ—Ç—Ä—ñ–≤";
    } else {
      reminderSettings.style.display = "none";
    }
  }

  if (reminderCheckbox && partSelect) {
    reminderCheckbox.addEventListener("change", updateReminderVisibility);
    partSelect.addEventListener("change", updateReminderVisibility);
    updateReminderVisibility();
  }

  const form = document.getElementById("repair-form");
  if (!form) return;

  form.addEventListener("submit", async function(event) {
  event.preventDefault();

  const car = form["car-name"].value.trim();
  const trackerType = form["tracker-type"].value;
  const trackerId = form["tracker-id"].value.trim();

  if (!car || !trackerType || !trackerId) {
    alert("–ë—É–¥—å –ª–∞—Å–∫–∞, –∑–∞–ø–æ–≤–Ω—ñ—Ç—å –≤—Å—ñ –ø–æ–ª—è.");
    return;
  }

  // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø—Ä–∏–≤—è–∑–∫–∏
  const links = await getCarLinks();
  const duplicate = links.find(l => l.car === car && l.tracker_id === trackerId);
  if (duplicate) {
    alert("–¶—è –ø—Ä–∏–≤‚Äô—è–∑–∫–∞ –≤–∂–µ —ñ—Å–Ω—É—î.");
    return;
  }

  const newLink = { car, tracker_type: trackerType, tracker_id: trackerId };
  // –ü–µ—Ä–µ–¥–∞—ë–º –º–∞—Å—Å–∏–≤ –≤—Å–µ—Ö –ø—Ä–∏–≤—è–∑–æ–∫ + –Ω–æ–≤–∞—è
  await setCarLinks([...links, newLink]);

  await renderLinkedCars();
  form.reset();
});
}

// --- –§–£–ù–ö–¶–Ü–á –î–õ–Ø link.html --- //

async function setupLinkPage() {
  const form = document.getElementById("link-form");
  if (!form) return;

  const container = document.getElementById("linked-cars");

  async function renderLinkedCars() {
    const links = await getCarLinks();

    if (links.length === 0) {
      container.innerHTML = "<p>–ù–µ–º–∞—î –ø—Ä–∏–≤‚Äô—è–∑–∞–Ω–∏—Ö –∞–≤—Ç–æ.</p>";
      return;
    }

    container.innerHTML = "<ul>" + links.map(link => `
      <li>
        üöó <strong>${link.car}</strong> ‚Äî —Ç–∏–ø: <em>${link.tracker_type}</em>, ID: <code>${link.tracker_id}</code>
      </li>
    `).join("") + "</ul>";
  }

  form.addEventListener("submit", async function(event) {
    event.preventDefault();

    const car = form["car-name"].value.trim();
    const trackerType = form["tracker-type"].value;
    const trackerId = form["tracker-id"].value.trim();

    if (!car || !trackerType || !trackerId) {
      alert("–ë—É–¥—å –ª–∞—Å–∫–∞, –∑–∞–ø–æ–≤–Ω—ñ—Ç—å –≤—Å—ñ –ø–æ–ª—è.");
      return;
    }

    const links = await getCarLinks();
    const duplicate = links.find(l => l.car === car && l.tracker_id === trackerId);
    if (duplicate) {
      alert("–¶—è –ø—Ä–∏–≤‚Äô—è–∑–∫–∞ –≤–∂–µ —ñ—Å–Ω—É—î.");
      return;
    }

    const newLink = { car, tracker_type: trackerType, tracker_id: trackerId };
    links.push(newLink);
    await setCarLinks(links);

    await renderLinkedCars();
    form.reset();
  });

  await renderLinkedCars();
}

// --- –í–ò–ó–û–í –ó–ê–õ–ï–ñ–ù–û –í–Ü–î –°–¢–û–†–Ü–ù–ö–ò --- //

document.addEventListener("DOMContentLoaded", async function() {
  if (document.getElementById("repair-form")) {
    await setupIndexPage();
  } else if (document.getElementById("link-form")) {
    await setupLinkPage();
  } else if (document.getElementById("car-checkboxes")) {
    await setupHistoryPage();
  }
});

// --- –Ü–°–¢–û–†–Ü–Ø --- //

async function setupHistoryPage() {
  const checkboxesContainer = document.getElementById("car-checkboxes");
  const latestReplContainer = document.getElementById("latest-replacements");
  const fullHistoryContainer = document.getElementById("full-history");

  const links = await getCarLinks();
  const history = await getRepairHistory();

  if (links.length === 0) {
    checkboxesContainer.innerHTML = "<p>–ù–µ–º–∞—î –∑–±–µ—Ä–µ–∂–µ–Ω–∏—Ö –∞–≤—Ç–æ.</p>";
    latestReplContainer.innerHTML = "";
    fullHistoryContainer.innerHTML = "";
    return;
  }
  checkboxesContainer.innerHTML = "";

  links.forEach(link => {
    const label = document.createElement("label");
    label.innerHTML = `
      <input type="checkbox" name="car-filter" value="${link.car}" />
      ${link.car}
    `;
    checkboxesContainer.appendChild(label);
    checkboxesContainer.appendChild(document.createElement("br"));
  });

  checkboxesContainer.addEventListener("change", () => {
    const selectedCars = Array.from(document.querySelectorAll('input[name="car-filter"]:checked')).map(cb => cb.value);
    showHistory(selectedCars);
  });

  function showHistory(selectedCars) {
    latestReplContainer.innerHTML = "";
    fullHistoryContainer.innerHTML = "";

    const filtered = history.filter(item => selectedCars.includes(item.car));

    const latestByCarPart = {};
    filtered.forEach(entry => {
      const key = `${entry.car}__${entry.part}`;
      if (!latestByCarPart[key] || new Date(entry.date) > new Date(latestByCarPart[key].date)) {
        latestByCarPart[key] = entry;
      }
    });

    latestReplContainer.innerHTML = Object.values(latestByCarPart).map(item => `
      <div style="border:1px solid #aaa; padding:10px; margin-bottom:10px;">
        üöó <strong>${item.car}</strong><br>
        üîß <strong>${item.part}</strong><br>
        üìÖ –î–∞—Ç–∞ –∑–∞–º—ñ–Ω–∏: ${item.date}<br>
        üîÅ –ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è: ${item.reminder ? `—á–µ—Ä–µ–∑ ${item.reminder_value} ${item.reminder_unit}` : "–ù—ñ"}<br>
        üí¨ –ö–æ–º–µ–Ω—Ç–∞—Ä: ${item.comment || "<i>–Ω–µ–º–∞—î</i>"}
      </div>
    `).join("") || "<p>–ù–µ–º–∞—î –¥–∞–Ω–∏—Ö.</p>";

    const sorted = filtered.sort((a, b) => new Date(b.date) - new Date(a.date));

    fullHistoryContainer.innerHTML = sorted.map(item => `
      <div style="border:1px solid #ccc; padding:8px; margin-bottom:8px;">
        <strong>${item.date}</strong> ‚Äî ${item.car} ‚Äî ${item.part}<br>
        üîÅ ${item.reminder ? `–ù–∞–≥–∞–¥–∞—Ç–∏ —á–µ—Ä–µ–∑ ${item.reminder_value} ${item.reminder_unit}` : "–ë–µ–∑ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è"}<br>
        üí¨ ${item.comment || "<i>–Ω–µ–º–∞—î –∫–æ–º–µ–Ω—Ç–∞—Ä—è</i>"}
      </div>
    `).join("") || "<p>–ù–µ–º–∞—î –∑–∞–ø–∏—Å—ñ–≤.</p>";
  }
}
