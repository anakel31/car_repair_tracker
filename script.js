// --- –ó–ê–ì–ê–õ–¨–ù–Ü –§–£–ù–ö–¶–Ü–á --- //
// --- –†–∞–±–æ—Ç–∞ —Å –ª–æ–∫–∞–ª—å–Ω—ã–º —Ñ–∞–π–ª–æ–º (—Ç–æ–ª—å–∫–æ –¥–ª—è –¥–µ—Å–∫—Ç–æ–ø–∞ —á–µ—Ä–µ–∑ Node.js/Electron) --- //

async function universalReadJsonFile(apiUrl, fileUrl) {
  // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º —á–µ—Ä–µ–∑ API
  try {
    const res = await fetch(apiUrl);
    if (res.ok) return await res.json();
  } catch {}
  // –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å ‚Äî –ø—Ä–æ–±—É–µ–º –∫–∞–∫ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π —Ñ–∞–π–ª
  try {
    const res = await fetch(fileUrl);
    if (res.ok) return await res.json();
  } catch {}
  return [];
}

// --- –†–∞–±–æ—Ç–∞ —Å –ø—Ä–∏–≤—è–∑–∫–∞–º–∏ –∞–≤—Ç–æ (cars.json) --- //
async function getCarLinks() {
  return await universalReadJsonFile('/api/cars', 'cars.json');
}

async function setCarLinks(links) {
  await writeCarsFile(links);
}

// --- –†–∞–±–æ—Ç–∞ —Å –∏—Å—Ç–æ—Ä–∏–µ–π —Ä–µ–º–æ–Ω—Ç–æ–≤ (history.json) --- //
async function getRepairHistory() {
  return await universalReadJsonFile('/api/history', 'history.json');
}

async function setRepairHistory(history) {
  await writeHistoryFile(history);
}

// --- –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —á—Ç–µ–Ω–∏—è/–∑–∞–ø–∏—Å–∏ —Ñ–∞–π–ª–æ–≤ --- //
async function writeCarsFile(data) {
  try {
    const res = await fetch('/api/cars', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(data)
    });
    return res.ok;
  } catch {
    alert("–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –ø—Ä–∏–≤—è–∑–æ–∫!");
    return false;
  }
}

async function writeHistoryFile(data) {
  try {
    const res = await fetch('/api/history', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(data)
    });
    return res.ok;
  } catch {
    alert("–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –∏—Å—Ç–æ—Ä–∏–∏!");
    return false;
  }
}
// --- –§–£–ù–ö–¶–Ü–á –î–õ–Ø index.html --- //

async function populateCarSelect() {
  const select = document.getElementById("car-select");
  if (!select) return;

  try {
    const links = await getCarLinks();
    select.innerHTML = '<option value="">-- –û–±–µ—Ä—ñ—Ç—å –∞–≤—Ç–æ --</option>';
    links.forEach(link => {
      const option = document.createElement("option");
      option.value = link.car;
      option.textContent = link.car;
      select.appendChild(option);
    });
  } catch (err) {
    console.error("–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —Å–ø–∏—Å–æ–∫ –∞–≤—Ç–æ:", err);
  }
}

async function renderRepairHistory() {
  const container = document.getElementById("repair-history");
  if (!container) return;

  const history = await getRepairHistory();

  if (history.length === 0) {
    container.innerHTML = "<p>–Ü—Å—Ç–æ—Ä—ñ—è —Ä–µ–º–æ–Ω—Ç—É –ø–æ—Ä–æ–∂–Ω—è.</p>";
    return;
  }

  container.innerHTML = history.slice().reverse().map(item => {
    return `
      <div style="border:1px solid #ccc; padding:10px; margin-bottom:10px;">
        <strong>–ê–≤—Ç–æ:</strong> ${item.car}<br>
        <strong>–ó–∞–ø—á–∞—Å—Ç–∏–Ω–∞:</strong> ${item.part}<br>
        <strong>–ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è:</strong> ${item.reminder ? "–¢–∞–∫" : "–ù—ñ"}<br>
        <strong>–ö–æ–º–µ–Ω—Ç–∞—Ä:</strong> ${item.comment || "<i>–Ω–µ–º–∞—î</i>"}<br>
        <strong>–î–∞—Ç–∞:</strong> ${item.date}
      </div>
    `;
  }).join("");
}

async function setupIndexPage() {
  await populateCarSelect();
  await renderRepairHistory();

  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–µ–≥–æ–¥–Ω—è—à–Ω—é—é –¥–∞—Ç—É –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
  const dateInput = document.getElementById("replace-date");
  if (dateInput) {
    const today = new Date();
    const yyyy = today.getFullYear();
    const mm = String(today.getMonth() + 1).padStart(2, '0');
    const dd = String(today.getDate()).padStart(2, '0');
    dateInput.value = `${yyyy}-${mm}-${dd}`;
  }

  // –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç–ª–µ–º–µ–Ω—Ç—ã –µ—Å—Ç—å –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
  const partSelect = document.getElementById("part-select");
  const reminderCheckbox = document.getElementById("reminder");
  const reminderSettings = document.getElementById("reminder-settings");
  const unitLabel = document.getElementById("unit-label");

  function updateReminderVisibility() {
    if (!partSelect || !reminderCheckbox || !reminderSettings || !unitLabel) return;
    const selectedPart = partSelect.value;
    const isChecked = reminderCheckbox.checked;

    if (isChecked) {
      reminderSettings.style.display = "block";
      unitLabel.textContent = selectedPart === "–°—Ç—Ä–∞—Ö–æ–≤–∫–∞" || selectedPart === "–¢–µ—Ö–Ω—ñ—á–Ω–∏–π –æ–≥–ª—è–¥"
        ? "–¥–Ω—ñ–≤"
        : "–∫—ñ–ª–æ–º–µ—Ç—Ä—ñ–≤";
    } else {
      reminderSettings.style.display = "none";
    }
  }

  if (reminderCheckbox && partSelect) {
    reminderCheckbox.addEventListener("change", updateReminderVisibility);
    partSelect.addEventListener("change", updateReminderVisibility);
    updateReminderVisibility();
  }

  const form = document.getElementById("repair-form");
  if (!form) return;

  form.addEventListener("submit", async function(event) {
    event.preventDefault();

    const car = form["car"].value;
    const part = form["part"].value;
    const date = form["replace-date"].value;
    const reminder = form["reminder"].checked;
    const reminder_value = form["reminder-value"] ? form["reminder-value"].value : "";
    const reminder_unit = document.getElementById("unit-label")?.textContent || "";
    const comment = form["comment"].value.trim();

    if (!car || !part || !date) {
      alert("–ë—É–¥—å –ª–∞—Å–∫–∞, –∑–∞–ø–æ–≤–Ω—ñ—Ç—å –≤—Å—ñ –æ–±–æ–≤'—è–∑–∫–æ–≤—ñ –ø–æ–ª—è.");
      return;
    }

    const history = await getRepairHistory();
    const newRepair = {
      car,
      part,
      date,
      reminder,
      reminder_value: reminder ? reminder_value : "",
      reminder_unit: reminder ? reminder_unit : "",
      comment
    };

    // --- –ù–æ–≤—ã–π –±–ª–æ–∫: –µ—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–∞—è –∑–∞–º–µ–Ω–∞ —ç—Ç–æ–π –∑–∞–ø—á–∞—Å—Ç–∏ –Ω–∞ —ç—Ç–æ–º –∞–≤—Ç–æ ---
const prev = history
  .filter(item => item.car === car && item.part === part)
  .sort((a, b) => new Date(b.date) - new Date(a.date))[0];

if (prev) {
  // –°—á–∏—Ç–∞–µ–º —Ä–∞–∑–Ω–∏—Ü—É –≤ –¥–Ω—è—Ö
  const prevDate = new Date(prev.date + 'T22:00:00');
  const currDate = new Date(date + 'T22:00:00');
  const daysPassed = Math.round((currDate - prevDate) / (1000 * 60 * 60 * 24));

  // –°—á–∏—Ç–∞–µ–º —Ä–∞–∑–Ω–∏—Ü—É –≤ –∫–∏–ª–æ–º–µ—Ç—Ä–∞—Ö (–µ—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–∏–≤—è–∑–∫–∞)
  const carLinks = await getCarLinks();
  const carLink = carLinks.find(link => link.car === car && link.tracker_type === "mega-gps");
  let kmPassed = null;
  if (carLink) {
    kmPassed = await getMileageMegaGPS(
      carLink.tracker_id,
      Math.floor(prevDate.getTime() / 1000),
      Math.floor(currDate.getTime() / 1000)
    );
  }

  // –î–æ–±–∞–≤–ª—è–µ–º –∫ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—é
  let addComment = `–ü–æ–ø–µ—Ä–µ–¥–Ω—è –∑–∞–º—ñ–Ω–∞: ${prev.date}. –ü—Ä–æ–π–¥–µ–Ω–æ ${daysPassed} –¥–Ω.`;
  if (kmPassed !== null) addComment += `, ${Math.round(kmPassed)} –∫–º.`;
  newRepair.comment = (newRepair.comment ? newRepair.comment + " | " : "") + addComment;
}

    await setRepairHistory([...history, newRepair]);
    await renderRepairHistory();
    form.reset();
  });
}

// --- –§–£–ù–ö–¶–Ü–á –î–õ–Ø link.html --- //

async function setupLinkPage() {
  const form = document.getElementById("link-form");
  if (!form) return;

  const container = document.getElementById("linked-cars");

  async function renderLinkedCars() {
    const links = await getCarLinks();

    if (links.length === 0) {
      container.innerHTML = "<p>–ù–µ–º–∞—î –ø—Ä–∏–≤‚Äô—è–∑–∞–Ω–∏—Ö –∞–≤—Ç–æ.</p>";
      return;
    }

    container.innerHTML = "<ul>" + links.map(link => `
      <li>
        üöó <strong>${link.car}</strong> ‚Äî —Ç–∏–ø: <em>${link.tracker_type}</em>, ID: <code>${link.tracker_id}</code>
      </li>
    `).join("") + "</ul>";
  }

  form.addEventListener("submit", async function(event) {
    event.preventDefault();

    const car = form["car-name"].value.trim();
    const trackerType = form["tracker-type"].value;
    const trackerId = form["tracker-id"].value.trim();

    if (!car || !trackerType || !trackerId) {
      alert("–ë—É–¥—å –ª–∞—Å–∫–∞, –∑–∞–ø–æ–≤–Ω—ñ—Ç—å –≤—Å—ñ –ø–æ–ª—è.");
      return;
    }

    const links = await getCarLinks();
    const duplicate = links.find(l => l.car === car && l.tracker_id === trackerId);
    if (duplicate) {
      alert("–¶—è –ø—Ä–∏–≤‚Äô—è–∑–∫–∞ –≤–∂–µ —ñ—Å–Ω—É—î.");
      return;
    }

    const newLink = { car, tracker_type: trackerType, tracker_id: trackerId };
    links.push(newLink);
    await setCarLinks(links);

    await renderLinkedCars();
    form.reset();
  });

  await renderLinkedCars();
}

// --- –í–ò–ó–û–í –ó–ê–õ–ï–ñ–ù–û –í–Ü–î –°–¢–û–†–Ü–ù–ö–ò --- //

document.addEventListener("DOMContentLoaded", async function() {
  if (document.getElementById("repair-form")) {
    await setupIndexPage();
  } else if (document.getElementById("link-form")) {
    await setupLinkPage();
  } else if (document.getElementById("car-checkboxes")) {
    await setupHistoryPage();
  }
});

// --- –Ü–°–¢–û–†–Ü–Ø --- //

async function setupHistoryPage() {
  const checkboxesContainer = document.getElementById("car-checkboxes");
  const latestReplContainer = document.getElementById("latest-replacements");
  const fullHistoryContainer = document.getElementById("full-history");

  const links = await getCarLinks();
  const history = await getRepairHistory();

  if (links.length === 0) {
    checkboxesContainer.innerHTML = "<p>–ù–µ–º–∞—î –∑–±–µ—Ä–µ–∂–µ–Ω–∏—Ö –∞–≤—Ç–æ.</p>";
    latestReplContainer.innerHTML = "";
    fullHistoryContainer.innerHTML = "";
    return;
  }
  checkboxesContainer.innerHTML = "";

  links.forEach(link => {
    const label = document.createElement("label");
    label.innerHTML = `
      <input type="checkbox" name="car-filter" value="${link.car}" />
      ${link.car}
    `;
    checkboxesContainer.appendChild(label);
    checkboxesContainer.appendChild(document.createElement("br"));
  });

  checkboxesContainer.addEventListener("change", () => {
    const selectedCars = Array.from(document.querySelectorAll('input[name="car-filter"]:checked')).map(cb => cb.value);
    showHistory(selectedCars);
  });

  function showHistory(selectedCars) {
    latestReplContainer.innerHTML = "";
    fullHistoryContainer.innerHTML = "";

    const filtered = history.filter(item => selectedCars.includes(item.car));

    const latestByCarPart = {};
    filtered.forEach(entry => {
      const key = `${entry.car}__${entry.part}`;
      if (!latestByCarPart[key] || new Date(entry.date) > new Date(latestByCarPart[key].date)) {
        latestByCarPart[key] = entry;
      }
    });

    latestReplContainer.innerHTML = Object.values(latestByCarPart).map(item => `
      <div style="border:1px solid #aaa; padding:10px; margin-bottom:10px;">
        üöó <strong>${item.car}</strong><br>
        üîß <strong>${item.part}</strong><br>
        üìÖ –î–∞—Ç–∞ –∑–∞–º—ñ–Ω–∏: ${item.date}<br>
        üîÅ –ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è: ${item.reminder ? `—á–µ—Ä–µ–∑ ${item.reminder_value} ${item.reminder_unit}` : "–ù—ñ"}<br>
        üí¨ –ö–æ–º–µ–Ω—Ç–∞—Ä: ${item.comment || "<i>–Ω–µ–º–∞—î</i>"}
      </div>
    `).join("") || "<p>–ù–µ–º–∞—î –¥–∞–Ω–∏—Ö.</p>";

    const sorted = filtered.sort((a, b) => new Date(b.date) - new Date(a.date));

    fullHistoryContainer.innerHTML = sorted.map(item => `
      <div style="border:1px solid #ccc; padding:8px; margin-bottom:8px;">
        <strong>${item.date}</strong> ‚Äî ${item.car} ‚Äî ${item.part}<br>
        üîÅ ${item.reminder ? `–ù–∞–≥–∞–¥–∞—Ç–∏ —á–µ—Ä–µ–∑ ${item.reminder_value} ${item.reminder_unit}` : "–ë–µ–∑ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è"}<br>
        üí¨ ${item.comment || "<i>–Ω–µ–º–∞—î –∫–æ–º–µ–Ω—Ç–∞—Ä—è</i>"}
      </div>
    `).join("") || "<p>–ù–µ–º–∞—î –∑–∞–ø–∏—Å—ñ–≤.</p>";
  }
}

async function renderRemindersTable() {
  const tableBody = document.querySelector('#reminders-table tbody');
  if (!tableBody) return;
  const history = await getRepairHistory();
  const carLinks = await getCarLinks();

  // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –∑–∞–ø–∏—Å–∏ —Å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ–º
  const reminders = history.filter(item => item.reminder && (item.reminder_value || item.reminder_unit));

  // –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –ø–æ –∫–∞–∂–¥–æ–π –ø–∞—Ä–µ "–∞–≤—Ç–æ+–∑–∞–ø—á–∞—Å—Ç–∏–Ω–∞"
  const latestByCarPart = {};
  reminders.forEach(item => {
    const key = `${item.car}__${item.part}`;
    if (!latestByCarPart[key] || new Date(item.date) > new Date(latestByCarPart[key].date)) {
      latestByCarPart[key] = item;
    }
  });

  const latestReminders = Object.values(latestByCarPart);

  tableBody.innerHTML = '';
  for (const item of latestReminders) {
    const carLink = carLinks.find(link => link.car === item.car && link.tracker_type === "mega-gps");
    let days = '';
    let km = '';
    let kmLeft = null;
    if (item.reminder_unit === '–¥–Ω—ñ–≤') {
      const repairDate = new Date(item.date + 'T22:00:00');
      const now = new Date();
      const diff = Math.ceil((repairDate.getTime() + item.reminder_value * 24 * 3600 * 1000 - now.getTime()) / (24 * 3600 * 1000));
      days = diff > 0 ? diff : 0;
    }
    if (item.reminder_unit === '–∫—ñ–ª–æ–º–µ—Ç—Ä—ñ–≤' && carLink) {
      const mileage = await getPartMileage(carLink.tracker_id, item.date);
      if (mileage != null) {
        kmLeft = item.reminder_value - mileage;
        kmLeft = kmLeft > 0 ? kmLeft : 0;
        km = kmLeft;
      } else {
        km = '‚Äî';
      }
      if (kmLeft !== null && kmLeft > 0) {
        const last30 = await getLast30DaysMileage(carLink.tracker_id);
        if (last30 && last30 > 0) {
          const avgPerDay = last30 / 30;
          days = avgPerDay > 0 ? Math.floor(kmLeft / avgPerDay) : '‚Äî';
        } else {
          days = '‚Äî';
        }
      } else if (kmLeft === 0) {
        days = 0;
      } else {
        days = '‚Äî';
      }
    }
    tableBody.innerHTML += `
      <tr>
        <td>${item.car}</td>
        <td>${item.part}</td>
        <td style="text-align:center;">${days}</td>
        <td style="text-align:center;">${km}</td>
      </tr>
    `;
  }
  if (latestReminders.length === 0) {
    tableBody.innerHTML = `<tr><td colspan="4" style="text-align:center;">–ù–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–∏—Ö –Ω–∞–≥–∞–¥—É–≤–∞–Ω—å</td></tr>`;
  }
}

async function getLast30DaysMileage(tracker_id) {
  const apiKey = 'S182743S365301';
  const now = new Date();
  const to = Math.floor(now.getTime() / 1000);
  const from = Math.floor(new Date(now.getTime() - 30 * 24 * 3600 * 1000).getTime() / 1000);
  return await getMileageMegaGPS(tracker_id, from, to);
}
// –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–±–µ–≥ –∑–∞ –ø–µ—Ä–∏–æ–¥ —á–µ—Ä–µ–∑ MEGA-GPS (—á–µ—Ä–µ–∑ —Å–µ—Ä–≤–µ—Ä-–ø—Ä–æ–∫—Å–∏)
async function getMileageMegaGPS(tracker_id, from, to) {
  const apiKey = 'S182743S365301';
  try {
    const res = await fetch('/proxy/megagps', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ tracker_id, from, to, apiKey })
    });
    if (!res.ok) return null;
    const text = await res.text();
    // –û—Ç–≤–µ—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ CSV, –∏—â–µ–º —Å—Ç—Ä–æ–∫—É —Å km10
    // –ü—Ä–∏–º–µ—Ä: id;km10;maxspeed;enginetime\n23647;1234;80;3600
    const lines = text.trim().split('\n');
    if (lines.length < 2) return null;
    const fields = lines[1].split(';');
    const km10 = parseInt(fields[1], 10);
    return km10 / 10; // –∫–∏–ª–æ–º–µ—Ç—Ä—ã
  } catch {
    return null;
  }
}

// –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–±–µ–≥ —Å –º–æ–º–µ–Ω—Ç–∞ —Ä–µ–º–æ–Ω—Ç–∞
async function getPartMileage(tracker_id, repairDate) {
  const fromDate = new Date(repairDate + 'T22:00:00');
  const from = Math.floor(fromDate.getTime() / 1000);
  const to = Math.floor(Date.now() / 1000);
  return await getMileageMegaGPS(tracker_id, from, to);
}

// –í—ã–∑–æ–≤–∏—Ç–µ –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener("DOMContentLoaded", () => {
  renderRemindersTable();
});